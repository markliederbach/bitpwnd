version: '2'

vars:
  SRC_DIR: bitpwnd
  PYTHON_VERSION:
    sh: test -f .python-version && cat .python-version | sed 's/\/.*//g'
  LOCAL_PYTHON:
    sh: python --version | awk  '{print $2}'
  GENERATED_DIR: generated

tasks:
  test:
    desc: Runs validation checks for CI pipelining
    cmds:
      - task: test:check-lock
      - task: test:vulns
      - task: test:pyfmt-check
      - task: test:pytest

  test:check-lock:
    desc: Checks that Pipfile.lock matches what is in Pipfile
    cmds:
      - pipenv install --deploy
    preconditions:
      - sh: pipenv --version
        msg: "Must install pipenv first!"

  test:vulns:
    desc: Verify all python packages do not have vulnerabilities
    cmds:
      - pipenv check
    preconditions:
      - sh: pipenv --version
        msg: "Must install pipenv first!"

  test:pyfmt-check:
    desc: Runs python style check
    cmds:
      - cmd: pipenv run black --check --diff {{.SRC_DIR}} tests

  test:pytest:
    desc: Runs python tests
    cmds:
      - cmd: pipenv run pytest --cov --cov-report term-missing

  deps:pypackages-dev:
    desc: Installs all python packages for development and testing
    cmds:
      - cmd: pipenv install --dev --pre

  deps:pipenv:
    desc: Installs pipenv or defers to existing installation
    cmds:
      - python3 -m pip install pipenv
    status:
      - which pipenv
    preconditions:
      - sh: test $PIPENV_PYTHON = "$(pyenv root)/shims/python"
        msg: You must set the following variable in your .bashrc `export PIPENV_PYTHON=$(pyenv root)/shims/python`

  deps:pyenv:
      desc: Installs python packages to local environment
      cmds:
        - pyenv install --skip-existing {{.PYTHON_VERSION}}
      preconditions:
        - sh: pyenv --version
          msg: "Must install pyenv first!"

  deps:
    desc: Sets up local environment for activities
    cmds:
      - task: deps:pyenv
      - task: deps:pipenv
      - task: deps:pypackages-dev

  ci:pipenv:
    desc: Installs pipenv for Travis
    cmds:
      - python3 -m pip install pipenv
    status:
      - which pipenv

  ci:deps:
    desc: Only used for Travis CI dependencies
    cmds:
      - task: ci:pipenv
      - pipenv install --deploy --dev --pre

  ci:
    desc: Run Travis CI
    cmds:
      - task: ci:deps
      - task: test

  pyfmt:
    desc: Runs python black to format python files
    cmds:
      - cmd: pipenv run black {{.SRC_DIR}} tests setup.py
  
  build:generated-dir:
    desc: Ensure the generated folder exists
    cmds:
      - cmd: mkdir -p {{.GENERATED_DIR}}
    status:
      - test -d {{.GENERATED_DIR}}

  build:requirements:
    desc: Generate a requirements.txt file from Pipfile.lock
    deps:
      - task: build:generated-dir
    cmds:
      - cmd: pipenv lock -r > {{.GENERATED_DIR}}/requirements.txt

  bump:patch:
    desc: Bump the patch version locally
    cmds:
      - task: bump
        vars: {BUMP_TYPE: patch}

  bump:minor:
    desc: Bump the minor version locally
    cmds:
      - task: bump
        vars: {BUMP_TYPE: minor}

  bump:major:
    desc: Bump the major version locally
    cmds:
      - task: bump
        vars: {BUMP_TYPE: major}

  bump:
    desc: Bump the version locally
    deps:
      - task: build:generated-dir
    vars:
      GIT_CURRENT_VERSION:
        sh: git fetch --tags && git describe --tags $(git rev-list --tags --max-count=1)
    cmds:
      - cmd: echo {{.GIT_CURRENT_VERSION}} > {{.GENERATED_DIR}}/version.txt
        silent: true
      - cmd: pipenv run bumpversion --current-version {{.GIT_CURRENT_VERSION}} {{.BUMP_TYPE}} {{.GENERATED_DIR}}/version.txt